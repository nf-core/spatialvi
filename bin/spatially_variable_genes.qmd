---
title: "Neighborhood enrichment analysis and Spatially variable genes"
format:
    nf-core-html: default
jupyter: python3
---

```{python}
#| tags: [parameters]
#| echo: false
input_sdata = "sdata_processed.zarr"  # Input: SpatialData file
svg_autocorr_method = "moran"  # Parameter: SVG autocorrelation method
n_top_svgs = 14  # Number of spatially variable genes to plot
artifact_dir = "artifacts"  # Output directory
output_csv = "spatially_variable_genes.csv"  # Output: gene list
output_adata = "adata_spatially_variable_genes.h5ad"  # Output: AnnData file
output_sdata = "sdata.zarr"  # Output: SpatialData file
```

```{python}
import numpy as np
import os
import pandas as pd
import scanpy as sc
import squidpy as sq
import spatialdata
from spatialdata_io.experimental import to_legacy_anndata
from anndata import AnnData
from matplotlib import pyplot as plt
```

```{python}
# Read data
sdata = spatialdata.read_zarr(input_sdata, ["images", "tables", "shapes"])
adata = to_legacy_anndata(sdata, coordinate_system="downscaled_hires", table_name="table", include_images=True)

print("Content of the AnnData object:")
print(adata)

# Suppress scanpy-specific warnings
sc.settings.verbosity = 0
```

# Differential gene expression

Before we look for spatially variable genes we first find differentially
expressed genes (DEG) across the different clusters found in the data. We can
visualize the top DEGs in a heatmap:

```{python}
#| warning: false
sc.tl.rank_genes_groups(adata, 'clusters', method='t-test')
sc.pl.rank_genes_groups_heatmap(adata, n_genes=5, groupby="clusters")
```

A different but similar visualization of the DEGs is the dot plot, where we can
also include the gene names:

```{python}
#| warning: false
sc.pl.rank_genes_groups_dotplot(adata, n_genes=5, groupby="clusters")
```

::: {.callout-note}
Please note that you may need to scroll sidewise in these figures, as their
height and width depends on the number of clusters as well as the number and
intersection of the DEGs that are being plotted.
:::

# Neighborhood enrichment analysis

We can perform a neighborhood enrichment analysis to find out which
genes are enriched in the neighborhood of each cluster:

```{python}
#| warning: false
sq.gr.spatial_neighbors(adata, coord_type="generic")
sq.gr.nhood_enrichment(adata, cluster_key="clusters")
sq.pl.nhood_enrichment(adata, cluster_key="clusters", method="ward", vmin=-100, vmax=100)
```

We visualize the interaction matrix between the different clusters:

```{python}
#| warning: false
sq.gr.interaction_matrix(adata, cluster_key="clusters")
sq.pl.interaction_matrix(adata, cluster_key="clusters", method="ward")
```

# Spatially variable genes with spatial autocorrelation statistics

Spatial transcriptomics data can give insight into how genes are expressed in
different areas in a tissue, allowing identification of spatial gene expression
patterns. Here we use [Moran's I](https://en.wikipedia.org/wiki/Moran%27s_I) autocorrelation score to identify such patterns.

```{python}
adata.var_names_make_unique()
sq.gr.spatial_autocorr(adata, mode=svg_autocorr_method)
if svg_autocorr_method == "moran":
    svg_autocorr_method_string = "moranI"
else:
    svg_autocorr_method_string = "gearyC"
adata.uns[svg_autocorr_method_string].head(n_top_svgs)
```

```{python}
#| echo: false
# Save the spatially variable genes to a CSV file:
adata.uns[svg_autocorr_method_string].to_csv(os.path.join(artifact_dir, output_csv))
```

```{python}
#| echo: false
#| info: false
adata.write(output_adata)
del sdata.tables["table"]
sdata.tables["table"] = adata
sdata.write("./" + output_sdata)
```
