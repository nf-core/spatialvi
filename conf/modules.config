/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    // Optionally save extracted Space Ranger reference archive
    withName: 'SPACERANGER_UNTAR_REFERENCE' {
        publishDir = [
            enabled: params.spaceranger_save_reference,
            path: { "${params.outdir}/reference" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Store sample-specific results in per-sample subdirectories
    withName: 'UNTAR_SPACERANGER_INPUT|UNTAR_DOWNSTREAM_INPUT' {
        publishDir = [
            enabled: params.save_untar_output,
            path: { "${params.outdir}/${meta.id}/data/untar" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SPACERANGER_COUNT {
        ext.args = '--create-bam="false"'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/spaceranger" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'READ_DATA|QUALITY_CONTROLS|CLUSTERING|SPATIALLY_VARIABLE_GENES' {
        ext.prefix = { "${notebook.baseName}" }
        ext.args = { "--metadata subtitle:'Sample: ${meta.id}'" }
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/reports" },
                mode: params.publish_dir_mode,
                pattern: "*{.html,.qmd,_extensions}"
            ],
            [
                path: { "${params.outdir}/${meta.id}/reports" },
                mode: params.publish_dir_mode,
                pattern: "params.yml",
                saveAs: { "${notebook.baseName}.yml" }
            ],
            [
                path: { "${params.outdir}/${meta.id}/data" },
                mode: params.publish_dir_mode,
                pattern: "artifacts/sdata_processed.zarr",
                saveAs: { "sdata_processed.zarr" }
            ],
            [
                path: { "${params.outdir}/${meta.id}/data" },
                mode: params.publish_dir_mode,
                pattern: "artifacts/adata_processed.h5ad",
                saveAs: { "adata_processed.h5ad" }
            ],
            [
                path: { "${params.outdir}/${meta.id}/data" },
                mode: params.publish_dir_mode,
                pattern: "artifacts/mqc_*.csv",
                saveAs: { filename -> filename.split('/')[1] }
            ],
            [
                path: { "${params.outdir}/${meta.id}/data" },
                mode: params.publish_dir_mode,
                pattern: "artifacts/spatially_variable_genes.csv",
                saveAs: { "spatially_variable_genes.csv" }
            ]
        ]
    }

}
